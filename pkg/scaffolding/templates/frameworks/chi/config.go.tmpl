package config

import (
	"os"
	"strconv"
	"fmt"

	"github.com/joho/godotenv"
)

type Config struct {
	Server   ServerConfig   `json:"server"`
	{{- if .Database}}
	Database DatabaseConfig `json:"database"`
	{{- end}}
	App      AppConfig      `json:"app"`
}

type ServerConfig struct {
	Port         string `json:"port"`
	Host         string `json:"host"`
	ReadTimeout  int    `json:"read_timeout"`
	WriteTimeout int    `json:"write_timeout"`
	IdleTimeout  int    `json:"idle_timeout"`
}

{{- if .Database}}
type DatabaseConfig struct {
	Type         string `json:"type"`
	Host         string `json:"host"`
	Port         string `json:"port"`
	Username     string `json:"username"`
	Password     string `json:"password"`
	Name         string `json:"name"`
	SSLMode      string `json:"ssl_mode"`
	Timezone     string `json:"timezone"`
	Path         string `json:"path"`
	MaxOpenConns int    `json:"max_open_conns"`
	MaxIdleConns int    `json:"max_idle_conns"`
}

// GetDSN returns the database source name string
func (c *DatabaseConfig) GetDSN() string {
	switch c.Type {
	case "postgres", "postgresql":
		return fmt.Sprintf("host=%s port=%s user=%s password=%s dbname=%s sslmode=%s timezone=%s",
			c.Host, c.Port, c.Username, c.Password, c.Name, c.SSLMode, c.Timezone)
	case "mysql":
		return fmt.Sprintf("%s:%s@tcp(%s:%s)/%s?parseTime=true",
			c.Username, c.Password, c.Host, c.Port, c.Name)
	case "sqlite":
		return c.Path
	default:
		return ""
	}
}
{{- end}}

type AppConfig struct {
	Name        string `json:"name"`
	Version     string `json:"version"`
	Environment string `json:"environment"`
	Debug       bool   `json:"debug"`
}

func Load() (*Config, error) {
	// Load .env file if it exists
	godotenv.Load()

	cfg := &Config{
		Server: ServerConfig{
			Port:         getEnv("PORT", "8080"),
			Host:         getEnv("HOST", "localhost"),
			ReadTimeout:  getEnvAsInt("READ_TIMEOUT", 30),
			WriteTimeout: getEnvAsInt("WRITE_TIMEOUT", 30),
			IdleTimeout:  getEnvAsInt("IDLE_TIMEOUT", 60),
		},
		{{- if .Database}}
		Database: DatabaseConfig{
			Type:         getEnv("DB_TYPE", "{{.Database}}"),
			Host:         getEnv("DB_HOST", "localhost"),
			Port:         getEnv("DB_PORT", "5432"),
			Username:     getEnv("DB_USERNAME", "postgres"),
			Password:     getEnv("DB_PASSWORD", "password"),
			Name:         getEnv("DB_NAME", "{{.ProjectName}}_db"),
			SSLMode:      getEnv("DB_SSLMODE", "disable"),
			Timezone:     getEnv("DB_TIMEZONE", "UTC"),
			Path:         getEnv("DB_PATH", "./{{.ProjectName | snakeCase}}.db"),
			MaxOpenConns: getEnvAsInt("DB_MAX_OPEN_CONNS", 10),
			MaxIdleConns: getEnvAsInt("DB_MAX_IDLE_CONNS", 5),
		},
		{{- end}}
		App: AppConfig{
			Name:        getEnv("APP_NAME", "{{.ProjectName}}"),
			Version:     getEnv("APP_VERSION", "1.0.0"),
			Environment: getEnv("APP_ENV", "development"),
			Debug:       getEnvAsBool("DEBUG", true),
		},
	}

	if err := cfg.Validate(); err != nil {
		return nil, fmt.Errorf("invalid configuration: %w", err)
	}

	return cfg, nil
}

// Validate validates the configuration
func (c *Config) Validate() error {
	if c.Server.Port == "" {
		return fmt.Errorf("server port is required")
	}

	switch c.Database.Type {
	case "postgres", "postgresql", "mysql":
		if c.Database.Host == "" {
			return fmt.Errorf("database host is required")
		}
		if c.Database.Username == "" {
			return fmt.Errorf("database user is required")
		}
		if c.Database.Name == "" {
			return fmt.Errorf("database name is required")
		}
	case "sqlite":
		if c.Database.Path == "" {
			return fmt.Errorf("database path is required")
		}
	}

	return nil
}

func getEnv(key, defaultValue string) string {
	if value := os.Getenv(key); value != "" {
		return value
	}
	return defaultValue
}

// GetMigrationDSN returns the database connection string for migrations.
func (c *DatabaseConfig) GetMigrationDSN() string {
	switch c.Type {
	case "postgres", "postgresql":
		return fmt.Sprintf("postgres://%s:%s@%s:%s/%s?sslmode=%s",
			c.Username, c.Password, c.Host, c.Port, c.Name, c.SSLMode)
	case "mysql":
		return fmt.Sprintf("mysql://%s:%s@tcp(%s:%s)/%s",
			c.Username, c.Password, c.Host, c.Port, c.Name)
	case "sqlite":
		return fmt.Sprintf("sqlite3://%s", c.Path)
	default:
		return ""
	}
}

func getEnvAsInt(key string, defaultValue int) int {
	if value := os.Getenv(key); value != "" {
		if intValue, err := strconv.Atoi(value); err == nil {
			return intValue
		}
	}
	return defaultValue
}

func getEnvAsBool(key string, defaultValue bool) bool {
	if value := os.Getenv(key); value != "" {
		if boolValue, err := strconv.ParseBool(value); err == nil {
			return boolValue
		}
	}
	return defaultValue
}
