package handlers

import (
	"net/http"
	"encoding/json"
	"strconv"

	"{{.ModulePath}}/internal/config"
{{- if eq .Tool "gorm"}}
	"{{.ModulePath}}/internal/models"
	"gorm.io/gorm"
{{- else if eq .Tool "sqlx"}}
	"{{.ModulePath}}/internal/models"
	"github.com/jmoiron/sqlx"
{{- else if eq .Tool "sqlc"}}
	"{{.ModulePath}}/internal/db"
	"database/sql"
{{- end}}
	"github.com/go-chi/chi/v5"
)

// UserHandler handles user-related endpoints
type UserHandler struct {
{{- if eq .Tool "gorm"}}
	db     *gorm.DB
{{- else if eq .Tool "sqlx"}}
	db     *sqlx.DB
{{- else if eq .Tool "sqlc"}}
	db     *sql.DB
	queries *db.Queries
{{- end}}
	config *config.Config
}

// NewUserHandler creates a new user handler
func NewUserHandler({{- if eq .Tool "gorm"}}database *gorm.DB{{- else if eq .Tool "sqlx"}}database *sqlx.DB{{- else if eq .Tool "sqlc"}}database *sql.DB{{- end}}, cfg *config.Config) *UserHandler {
	return &UserHandler{
		db:     database,
{{- if eq .Tool "sqlc"}}
		queries: db.New(database),
{{- end}}
		config: cfg,
	}
}

// CreateUser handles POST /users
func (h *UserHandler) CreateUser(w http.ResponseWriter, r *http.Request) {
	w.Header().Set("Content-Type", "application/json")
{{- if eq .Tool "gorm"}}
	var user models.User
	if err := json.NewDecoder(r.Body).Decode(&user); err != nil {
		http.Error(w, "Invalid request body", http.StatusBadRequest)
		return
	}

	result := h.db.Create(&user)
	if result.Error != nil {
		http.Error(w, "Failed to create user", http.StatusInternalServerError)
		return
	}

	json.NewEncoder(w).Encode(user)
{{- else if eq .Tool "sqlx"}}
	var user models.User
	if err := json.NewDecoder(r.Body).Decode(&user); err != nil {
		http.Error(w, "Invalid request body", http.StatusBadRequest)
		return
	}

	query := `INSERT INTO users (name, email) VALUES ($1, $2) RETURNING id, created_at, updated_at`
	err := h.db.QueryRow(query, user.Name, user.Email).Scan(&user.ID, &user.CreatedAt, &user.UpdatedAt)
	if err != nil {
		http.Error(w, "Failed to create user", http.StatusInternalServerError)
		return
	}

	json.NewEncoder(w).Encode(user)
{{- else if eq .Tool "sqlc"}}
	var req struct {
		Name  string `json:"name"`
		Email string `json:"email"`
	}

	if err := json.NewDecoder(r.Body).Decode(&req); err != nil {
		http.Error(w, "Invalid request body", http.StatusBadRequest)
		return
	}

	user, err := h.queries.CreateUser(r.Context(), db.CreateUserParams{
		Name:  req.Name,
		Email: req.Email,
	})
	if err != nil {
		http.Error(w, "Failed to create user", http.StatusInternalServerError)
		return
	}

	json.NewEncoder(w).Encode(user)
{{- end}}
}

// GetUser handles GET /users/:id
func (h *UserHandler) GetUser(w http.ResponseWriter, r *http.Request) {
	w.Header().Set("Content-Type", "application/json")
	idParam := chi.URLParam(r, "id")
	id, err := strconv.ParseInt(idParam, 10, 64)
	if err != nil {
		http.Error(w, "Invalid user ID", http.StatusBadRequest)
		return
	}

{{- if eq .Tool "gorm"}}
	var user models.User
	result := h.db.First(&user, id)
	if result.Error != nil {
		if result.Error == gorm.ErrRecordNotFound {
			http.Error(w, "User not found", http.StatusNotFound)
		} else {
			http.Error(w, "Failed to fetch user", http.StatusInternalServerError)
		}
		return
	}

	json.NewEncoder(w).Encode(user)
{{- else if eq .Tool "sqlx"}}
	var user models.User
	err = h.db.Get(&user, "SELECT * FROM users WHERE id = $1", id)
	if err != nil {
		if err == sql.ErrNoRows {
			http.Error(w, "User not found", http.StatusNotFound)
		} else {
			http.Error(w, "Failed to fetch user", http.StatusInternalServerError)
		}
		return
	}

	json.NewEncoder(w).Encode(user)
{{- else if eq .Tool "sqlc"}}
	user, err := h.queries.GetUser(r.Context(), int32(id))
	if err != nil {
		if err == sql.ErrNoRows {
			http.Error(w, "User not found", http.StatusNotFound)
		} else {
			http.Error(w, "Failed to fetch user", http.StatusInternalServerError)
		}
		return
	}

	json.NewEncoder(w).Encode(user)
{{- end}}
}

// UpdateUser handles PUT /users/:id
func (h *UserHandler) UpdateUser(w http.ResponseWriter, r *http.Request) {
	w.Header().Set("Content-Type", "application/json")
	idParam := chi.URLParam(r, "id")
	id, err := strconv.ParseInt(idParam, 10, 64)
	if err != nil {
		http.Error(w, "Invalid user ID", http.StatusBadRequest)
		return
	}

{{- if eq .Tool "gorm"}}
	var user models.User
	if err := json.NewDecoder(r.Body).Decode(&user); err != nil {
		http.Error(w, "Invalid request body", http.StatusBadRequest)
		return
	}

	result := h.db.Model(&user).Where("id = ?", id).Updates(user)
	if result.Error != nil {
		http.Error(w, "Failed to update user", http.StatusInternalServerError)
		return
	}

	if result.RowsAffected == 0 {
		http.Error(w, "User not found", http.StatusNotFound)
		return
	}

	h.db.First(&user, id)
	json.NewEncoder(w).Encode(user)
{{- else if eq .Tool "sqlx"}}
	var req struct {
		Name  string `json:"name"`
		Email string `json:"email"`
	}

	if err := json.NewDecoder(r.Body).Decode(&req); err != nil {
		http.Error(w, "Invalid request body", http.StatusBadRequest)
		return
	}

	query := `UPDATE users SET name = $1, email = $2, updated_at = NOW() WHERE id = $3`
	result, err := h.db.Exec(query, req.Name, req.Email, id)
	if err != nil {
		http.Error(w, "Failed to update user", http.StatusInternalServerError)
		return
	}

	rowsAffected, _ := result.RowsAffected()
	if rowsAffected == 0 {
		http.Error(w, "User not found", http.StatusNotFound)
		return
	}

	var user models.User
	h.db.Get(&user, "SELECT * FROM users WHERE id = $1", id)
	json.NewEncoder(w).Encode(user)
{{- else if eq .Tool "sqlc"}}
	var req struct {
		Name  string `json:"name"`
		Email string `json:"email"`
	}

	if err := json.NewDecoder(r.Body).Decode(&req); err != nil {
		http.Error(w, "Invalid request body", http.StatusBadRequest)
		return
	}

	user, err := h.queries.UpdateUser(r.Context(), db.UpdateUserParams{
		ID:    int32(id),
		Name:  req.Name,
		Email: req.Email,
	})
	if err != nil {
		if err == sql.ErrNoRows {
			http.Error(w, "User not found", http.StatusNotFound)
		} else {
			http.Error(w, "Failed to update user", http.StatusInternalServerError)
		}
		return
	}

	json.NewEncoder(w).Encode(user)
{{- end}}
}

// DeleteUser handles DELETE /users/:id
func (h *UserHandler) DeleteUser(w http.ResponseWriter, r *http.Request) {
	w.Header().Set("Content-Type", "application/json")
	idParam := chi.URLParam(r, "id")
	id, err := strconv.ParseInt(idParam, 10, 64)
	if err != nil {
		http.Error(w, "Invalid user ID", http.StatusBadRequest)
		return
	}

{{- if eq .Tool "gorm"}}
	result := h.db.Delete(&models.User{}, id)
	if result.Error != nil {
		http.Error(w, "Failed to delete user", http.StatusInternalServerError)
		return
	}

	if result.RowsAffected == 0 {
		http.Error(w, "User not found", http.StatusNotFound)
		return
	}

	json.NewEncoder(w).Encode(map[string]string{"message": "User deleted successfully"})
{{- else if eq .Tool "sqlx"}}
	result, err := h.db.Exec("DELETE FROM users WHERE id = $1", id)
	if err != nil {
		http.Error(w, "Failed to delete user", http.StatusInternalServerError)
		return
	}

	rowsAffected, _ := result.RowsAffected()
	if rowsAffected == 0 {
		http.Error(w, "User not found", http.StatusNotFound)
		return
	}

	json.NewEncoder(w).Encode(map[string]string{"message": "User deleted successfully"})
{{- else if eq .Tool "sqlc"}}
	err := h.queries.DeleteUser(r.Context(), int32(id))
	if err != nil {
		if err == sql.ErrNoRows {
			http.Error(w, "User not found", http.StatusNotFound)
		} else {
			http.Error(w, "Failed to delete user", http.StatusInternalServerError)
		}
		return
	}

	json.NewEncoder(w).Encode(map[string]string{"message": "User deleted successfully"})
{{- end}}
}
